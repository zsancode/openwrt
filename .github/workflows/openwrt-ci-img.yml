# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt-CI-img

on: workflow_dispatch

env:
  # Define your image build parameters
  RELEASE: 21.02.0-rc2
  TARGET: sunxi
  ARCH: cortexa7
  PROFILE: sinovoip_bananapi-m2-ultra
  PACKAGES: "base-files ca-bundle dropbear fstools libc libgcc libustream-wolfssl logd luci luci-app-firewall luci-app-samba4 luci-i18n-base-zh-cn luci-base luci-lib-ip luci-lib-nixio luci-mod-admin-full luci-proto-3g luci-proto-ppp luci-theme-bootstrap mtd netifd opkg uci uclient-fetch urandom-seed urngd busybox ppp ppp-mod-pppoe procd rpcd swconfig uboot-envtools partx-utils mkf2fs e2fsprogs dnsmasq firewall4 iptables kmod-ipt-offload kmod-rtc-sunxi kmod-usb-core kmod-usb-net kmod-usb-net-cdc-ether kmod-usb-net-cdc-mbim kmod-usb-net-cdc-ncm kmod-usb-net-huawei-cdc-ncm kmod-usb-net-qmi-wwan kmod-usb-net-rndis kmod-usb-net-sierrawireless kmod-usb-ohci kmod-usb-serial kmod-usb-serial-option kmod-usb-serial-qualcomm kmod-usb-serial-sierrawireless kmod-usb-serial-wwan kmod-usb-uhci kmod-usb-wdm kmod-usb2 ppp ppp-mod-pppoe usb-modeswitch sstp-client"

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-18.04

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          df -h

      - name: Update feeds
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
      - name: Download App
        run: |
          git clone https://github.com/liuran001/openwrt-packages.git --depth=1 package/extern

      - name: Generate configuration file
        run: make defconfig

      - name: Make download
        run: |
          cp build.config .config
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          make clean

      - name: tar
        run: |
          tar czvf ../a.tar.gz *
#          mv ../a.tar.gz .

#       - name: Upload release asset
#         if: github.event == 'release'
#         uses: svenstaro/upload-release-action@v2
#         with:
#           repo_token: ${{ secrets.YOURTOKEN }}
#           file: ./a.tar.gz
#           tag: ${{ github.ref }}
#           file_glob: true

      - name: Generate release tag
        id: tag
        run: |
          mv ../a.tar.gz bin/
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          echo "::set-output name=status::success"
      
      - name: Release the image
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: OpenWrt-${{ env.TARGET }}-${{ env.RELEASE }}-${{ steps.tag.outputs.release_tag }}
          files: bin/*.tar.gz
          body: |
            Release: `${{ env.RELEASE }}`
            Target: `${{ env.TARGET }}`
            Arch: `${{ env.ARCH }}`
            Build Profile: `${{ env.PROFILE }}`
            Included Packages: `${{ env.PACKAGES }}`

